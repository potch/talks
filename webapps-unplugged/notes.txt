# Webapps Unplugged

"We're building the phone powered by the Open Web!"
"If you can build a website, you can build an app"

Great, but what if you don't have an internet connection?

Well,

Hm.

In the era of high definition streaming video, complex web applications that blur the line between website and desktop application, and cellular speeds approaching that of wifi, the digital divide is larger than ever! And it shows in connectivity.

[Big Gulps of data
Tiny Espresso cup]

Some markets guzzle data as fast as they can. Month-to-month contracts are the norm with unlimited data or high caps. But in much of the world, Internet access is a luxury. It's emininently affordable thanks to pre-paid sims and pay-as-you-go plans, but mobile data is a commodity that is rationed and applied only when necessary, using it during the dash between WiFi hotspots. The next billion internet users will come online in markets like these, and to reach them using an platform built around the technologies of the internet presents challenges beyond those of competitors, whose platforms rely mostly on code installed directly onto the device.

How can we take the wow-capable technologies of the Web, deliver them to phones via the mechanisms of the Internet, and still respect the wallets and throughputs of this emerging market?

It turns out a handful of technologies have been produced and standardized in the big bucket of awesome that is HTML5 that can help us take our beautiful online creations, and take them to a place we might never have expected- the bathroom of an airplane.

# Why Go Offline?

Here are the big reasons your app should know how to cut the cord:

## Graceful experience

Good apps provide access to important data when no connection is available. Think of all those times you held important information in your inbox so you could get to it later on your phone.

Even if your app *must* be online to function properly, a friendly message apologizing in your app's brand is much nicer than the generic 404 screen!

## Slow connections and Pre-paid Plans

Respect your users who pay up front for their data, or who have to go out of their way to come up for digital air. The day you find yourself on EDGE waiting 5 minutes for your own simple website to load is the day you realize that maybe that extra 60K webfont wasn't worth it. But you don't have to settle or skimp (at least not always)! The browser cache is unreliable. By storing your assets in the offline cache, you can ensure your app will only use the network when it has something new to say.

## Spotty connections

3G and LTE have never been in more markets, and they've never failed to let me down when I need them most- the front half of my house or, say, *the entirety of the city San Francisco*. Allowing your app to detect when it is offline, even momentarily, and waiting patiently for the train to come out of the tunnel is better than simply erroring out.

## Performance

Keeping your assets offline will help your site load faster- even when your user is online! Even your data-guzzling users will notice the performance of your app, describing it as "snappy" or the coveted "like native"! Eat that, Facebook.

# Great. I'm sold. Now what?

There are 3 big technologies at play in HTML5 that aid in offline access.

## localStorage

The localStorage object is the poster-child for simple data persistence. It can be addressed just like any other javascript object, reading and writing values to keys. The important difference? Next time you load the page, all that data is just as you left it.

### Basic example

    var name = localStorage.name;
    if (!name) {
        name = prompt('enter your name');
        localStorage.name = name;
    }
    alert('Hello, ' + name + '!');

The first time we visit a page with this code, we will be prompted to enter our name. The next time, the page will already know our name! But wait, couldn't we do this with cookies before? Sure, but cookies are sent to the server with every request, increasing the number of bytes you send. But seriously, could it get easier?

#### Features

- Acts like a javascript object, with simple key-value storage.
- It Just Worksâ„¢

### Watch out for

The data in localStorage is only available on the domain it was stored- hence the 'local' in localStorage. This is arguably a security feature!

All the reading and writing of the localStorage object is done synchronously- watch out for lag with large amounts of data. You never know when the browser will have to go to disk, and then you're going to have a bad time.

LocalStorage has relatively low limits on how much data you can store. A good rule is to not store site resources in localStorage, only user data and state persistance.

# Examples.

Let's take a look at a few completely-real examples and see what steps we can take to get them working offline.

## Cranky Cardinals

An immensely popular web game (built in HTML5, natch). Users can't wait



